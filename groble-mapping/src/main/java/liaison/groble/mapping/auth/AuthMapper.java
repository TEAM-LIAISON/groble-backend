package liaison.groble.mapping.auth;

import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import liaison.groble.api.model.auth.request.PhoneNumberVerifyCodeRequest;
import liaison.groble.api.model.auth.request.PhoneNumberVerifyRequest;
import liaison.groble.api.model.auth.request.SignInRequest;
import liaison.groble.api.model.auth.request.SignUpRequest;
import liaison.groble.api.model.auth.request.UserWithdrawalRequest;
import liaison.groble.api.model.auth.request.VerifyEmailCodeRequest;
import liaison.groble.api.model.auth.response.SignInResponse;
import liaison.groble.api.model.auth.response.SignInTestResponse;
import liaison.groble.application.auth.dto.PhoneNumberVerifyCodeRequestDTO;
import liaison.groble.application.auth.dto.PhoneNumberVerifyRequestDTO;
import liaison.groble.application.auth.dto.SignInAuthResultDTO;
import liaison.groble.application.auth.dto.SignInDTO;
import liaison.groble.application.auth.dto.SignUpDTO;
import liaison.groble.application.auth.dto.UserWithdrawalDTO;
import liaison.groble.application.auth.dto.VerifyEmailCodeDTO;
import liaison.groble.mapping.config.GrobleMapperConfig;

@Mapper(config = GrobleMapperConfig.class)
public interface AuthMapper {

  // ====== üì• Request ‚Üí DTO Î≥ÄÌôò ======
  /** [ÌÜµÌï© Î°úÍ∑∏Ïù∏] SignInRequest ‚Üí SignInDTO */
  SignInDTO toSignInDTO(SignInRequest request);

  /** [ÌÜµÌï© ÌöåÏõêÍ∞ÄÏûÖ] SignUpRequest ‚Üí SignUpDTO */
  @Mapping(
      target = "termsTypeStrings",
      expression = "java(request.getTermsTypes().stream().map(Enum::name).toList())")
  SignUpDTO toSignUpDTO(SignUpRequest request);

  /** UserWithdrawalRequest ‚Üí UserWithdrawalDTO */
  @Mapping(target = "reason", expression = "java(request.getReason().name())")
  UserWithdrawalDTO toUserWithdrawalDTO(UserWithdrawalRequest request);

  // ====== üì§ DTO ‚Üí Response Î≥ÄÌôò ======

  /** (email + Ïù∏Ï¶ù Í≤∞Í≥º DTO) ‚Üí SignInResponse */
  @Mapping(target = "authenticated", constant = "true")
  SignInResponse toSignInResponse(String email, SignInAuthResultDTO dto);

  @Mapping(target = "email", source = "email")
  @Mapping(target = "authenticated", constant = "true")
  SignInTestResponse toSignInTestResponse(String email, SignInAuthResultDTO dto);

  /** VerifyEmailCodeRequest ‚Üí VerifyEmailCodeDTO */
  VerifyEmailCodeDTO toVerifyEmailCodeDTO(VerifyEmailCodeRequest request);

  /** PhoneNumberVerifyRequest ‚Üí PhoneNumberVerifyRequestDTO */
  PhoneNumberVerifyRequestDTO toPhoneNumberVerifyRequestDTO(PhoneNumberVerifyRequest request);

  /** PhoneNumberVerifyCodeRequest ‚Üí PhoneNumberVerifyCodeRequestDTO */
  @Mapping(source = "verificationCode", target = "verifyCode")
  PhoneNumberVerifyCodeRequestDTO toPhoneNumberVerifyCodeRequestDTO(
      PhoneNumberVerifyCodeRequest request);
}
