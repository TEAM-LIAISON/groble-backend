plugins {
	id 'java'
    id 'java-library'
	id 'org.springframework.boot' version '3.3.10'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.21.0'
}

// 루트 프로젝트 자체는 빌드되지 않음
tasks.named('bootJar') {
    enabled = false
}
tasks.named('jar') {
    enabled = false
}

// 의존성 버전 관리
ext {
    queryDslVersion = '5.0.0'
    jwtVersion = '0.11.5'
    springdocVersion = '2.4.0'
    guavaVersion = '32.1.3-jre'
}

allprojects {
    group = 'liaison'
    version = '0.0.1-SNAPSHOT'
    
    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.diffplug.spotless'

    // 모든 모듈에 Java 17 적용
    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        // 공통 라이브러리
        testImplementation 'org.springframework.boot:spring-boot-starter-test'

        // Lombok 설정
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    // 기본적으로 모든 서브프로젝트의 bootJar 비활성화, jar 활성화
    tasks.named('bootJar') {
        enabled = false
    }
    tasks.named('jar') {
        enabled = true
    }

    // 테스트 설정
    tasks.named('test') {
        useJUnitPlatform()
    }

    // 코드 포맷터 Spotless 설정
    spotless {
        java {
            googleJavaFormat()
            removeUnusedImports()
            importOrder 'java', 'javax', 'jakarta', 'org', 'com', 'liaison', ''
            trimTrailingWhitespace()
            endWithNewline()
        }
    }
}

project(':groble-common') {
    tasks.named('bootJar') {
        enabled = false
    }

    tasks.named('jar') {
        enabled = true
    }

    dependencies {
        // Spring Web
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
}

// API 모듈 설정 (API 컴포넌트를 위한 상위 모듈)
project(':groble-api') {
    tasks.named('bootJar') {
        enabled = false
    }
    tasks.named('jar') {
        enabled = false
    }
    
    // API 하위 모듈 공통 의존성
    subprojects {
        dependencies {
            implementation 'org.springframework.boot:spring-boot-starter-web'
            implementation 'org.springframework.boot:spring-boot-starter-security'
            implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"
            implementation 'org.springframework.boot:spring-boot-starter-validation'
            runtimeOnly 'com.mysql:mysql-connector-j'
            developmentOnly 'org.springframework.boot:spring-boot-devtools'
        }
    }
}

// 모듈 간 의존성 설정 - 클린 아키텍처 원칙에 따라 의존성 방향 설정
project(':groble-api:groble-api-server') {
    dependencies {
        implementation project(':groble-common')
        implementation project(':groble-api:groble-api-model')
        implementation project(':groble-application')
        implementation project(':groble-security')

        // Spring Data JPA
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    }

    tasks.named('bootJar') {
        enabled = true  // API 서버 모듈만 실행 가능한 JAR로 활성화
    }
}

project(':groble-api:groble-api-model') {
    dependencies {
        implementation project(':groble-domain')
        implementation project(':groble-common')

        // API 모델에 필요한 의존성
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'com.fasterxml.jackson.core:jackson-annotations'
    }
}

project(':groble-application') {
    dependencies {
        implementation project(':groble-domain')
        implementation project(':groble-common')
        implementation project(':groble-infrastructure:groble-persistence')
        implementation project(':groble-infrastructure:groble-external')
        
        // 트랜잭션 관리
        implementation 'org.springframework:spring-tx'
        implementation 'org.springframework.boot:spring-boot-starter-aop'
    }
}

project(':groble-domain') {
    dependencies {
        implementation project(':groble-common')

        // JPA
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // Security
        implementation 'org.springframework.boot:spring-boot-starter-security'
    }
}

project(':groble-infrastructure:groble-persistence') {
    dependencies {
        implementation project(':groble-domain')
        implementation project(':groble-common')

        // JPA 의존성
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

        // QueryDSL 의존성
        implementation "com.querydsl:querydsl-jpa:${queryDslVersion}:jakarta"
        annotationProcessor "com.querydsl:querydsl-apt:${queryDslVersion}:jakarta"
        annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
        annotationProcessor 'jakarta.persistence:jakarta.persistence-api'

        // MySQL Driver
        runtimeOnly 'com.mysql:mysql-connector-j'
    }
}

project(':groble-infrastructure:groble-external') {
    dependencies {
        implementation project(':groble-domain')
        implementation project(':groble-common')

        // 외부 API 연동을 위한 의존성
        implementation 'io.projectreactor:reactor-core'
        implementation 'com.fasterxml.jackson.core:jackson-databind'
        implementation 'org.springframework.boot:spring-boot-starter-cache'
    }
}

project(':groble-security') {
    dependencies {
        implementation project(':groble-domain')
        implementation project(':groble-common')
        implementation project(':groble-infrastructure:groble-persistence')

        // Spring Web
        implementation 'org.springframework.boot:spring-boot-starter-web'

        // Spring Security
        implementation 'org.springframework.boot:spring-boot-starter-security'

        // Spring OAuth2 Client (소셜 로그인)
        implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

        // Spring AOP
        implementation 'org.springframework.boot:spring-boot-starter-aop'

        // JWT
        implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
        runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
        runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"

        // Spring Data Redis (토큰 저장, 세션 관리)
        implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    }
}
