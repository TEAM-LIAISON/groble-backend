spring:
  profiles:
    group:
      blue: blue, common, secret-prod, proxy
      green: green, common, secret-prod, proxy

server:
  env: blue

---
spring:
  config:
    activate:
      on-profile: proxy

# 프록시 설정
http:
  proxy:
    enabled: true
    host: ${HTTP_PROXY_HOST:localhost}
    port: ${HTTP_PROXY_PORT:3128}

# 외부 API 호출용 프록시 설정
external:
  api:
    proxy:
      enabled: true
      host: ${HTTP_PROXY_HOST:localhost}
      port: ${HTTP_PROXY_PORT:3128}

---

spring:
  config:
    activate:
      on-profile: blue

server:
  port: 8080
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always

---

spring:
  config:
    activate:
      on-profile: green

server:
  port: 8080
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always

---

spring:
  config:
    activate:
      on-profile: common

  application:
    name: groble
  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    validate-on-migrate: true
    clean-disabled: true

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        format_sql: false
        show_sql: false
        use_sql_comments: false
        default_batch_fetch_size: 100
        generate_statistics: false   # 성능 모니터링 설정
        jdbc:
          batch_size: 50
          time_zone: Asia/Seoul
        order_inserts: true
        order_updates: true
    hibernate:
      ddl-auto: validate
  mvc:
    path match:
      matching-strategy: ant_path_matcher

  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2MB  # 2MB 이하는 메모리에 보관 (성능 개선)
      max-file-size: 60MB  # 유지
      max-request-size: 60MB  # 유지
      resolve-lazily: true  # 실제 파일 접근 시점에 파싱 (메모리 효율)

server:
  timezone: Asia/Seoul
  tomcat:
    connection-timeout: 60000  # 60초 (연결 타임아웃)
    max-swallow-size: 62914560  # 60MB (max-file-size와 동일)
    max-http-form-post-size: 62914560  # 60MB
    keep-alive-timeout: 60000  # Keep-Alive 타임아웃
  error:
    include-message: always  # 에러 메시지 포함
    include-stacktrace: on-param  # 스택트레이스 조건부 포함

storage:
  provider: s3
  s3:
    bucket: image.groble.im

app:
  frontend-url: https://groble.im
  backend-url: https://api.groble.im
  cookie:
    domain: groble.im
    admin-domain: groble.im
  reset:
    base-url: https://groble.im
    path: /reset-password
    expiration-ms: 200000 # 2 minutes

# Springdoc OpenAPI Configuration
springdoc:
  swagger-ui:
    path: /swagger-ui
    tags-sorter: alpha
    operations-sorter: alpha
    doc-expansion: none
    disable-swagger-default-url: true
  api-docs:
    path: /v3/api-docs
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**
  packages-to-scan:
    - liaison.groble.api.server
  show-actuator: false
  model-and-view-allowed: true

# Logging
logging:
  level:
    root: INFO
    liaison: DEBUG
    # Spring 전반
    org.springframework: INFO
    org.springframework.web: DEBUG            # 요청 매핑/핸들러 흐름
    org.springframework.http: INFO
    org.springframework.web.client: INFO      # RestTemplate
    org.springframework.web.reactive.function.client: INFO  # WebClient
    reactor.netty.http.client: INFO

    # DB 쿼리
    org.springframework.jdbc.core: DEBUG      # JdbcTemplate가 실행하는 SQL
    org.hibernate.SQL: DEBUG                  # Hibernate가 만든 SQL
    org.hibernate.orm.jdbc.bind: TRACE        # 바인딩 파라미터 (Boot 3+)
    # (Boot 2.x면) org.hibernate.type.descriptor.sql.BasicBinder: TRACE

    # HTTP 클라이언트 (Apache)
    org.apache.http: INFO
    org.apache.http.wire: WARN                # 너무 시끄러우니 기본은 WARN

    # 문서/외부
    org.springdoc: INFO
    io.swagger.v3: INFO
    com.amazonaws: INFO

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
    metrics:
      export:
        prometheus:
          enabled: true
      distribution:
        percentiles-histogram:
          http.server.requests: true
      tags:
        application: ${spring.application.name}
        environment: ${server.env}
    observations:
      key-values:
        application: ${spring.application.name}
