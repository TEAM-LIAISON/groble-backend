spring:
  profiles:
    group:
      blue: blue, common, secret-dev
      green: green, common, secret-dev

server:
  env: blue

---
#spring:
#  config:
#    activate:
#      on-profile: proxy
#
## 프록시 설정
#http:
#  proxy:
#    host: ${HTTP_PROXY_HOST:localhost}
#    port: ${HTTP_PROXY_PORT:3128}
#    enabled: true
#
## 외부 API 호출용 프록시 설정
#external:
#  api:
#    proxy:
#      enabled: true
#      host: ${HTTP_PROXY_HOST:localhost}
#      port: ${HTTP_PROXY_PORT:3128}

---

spring:
  config:
    activate:
      on-profile: blue

server:
  port: 8080
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always

---

spring:
  config:
    activate:
      on-profile: green

server:
  port: 8080
  servlet:
    context-path: /
  error:
    include-message: always
    include-binding-errors: always

---

spring:
  config:
    activate:
      on-profile: common

  application:
    name: groble

  jackson:
    time-zone: Asia/Seoul

  flyway:
    enabled: true
    baseline-on-migrate: true
    baseline-version: 0
    validate-on-migrate: true
    clean-disabled: true

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        format_sql: false
        show_sql: false
        use_sql_comments: false
        default_batch_fetch_size: 100
        generate_statistics: false   # 성능 모니터링 설정
        jdbc:
          batch_size: 50
          time_zone: Asia/Seoul
        order_inserts: true
        order_updates: true
    hibernate:
      ddl-auto: validate
  mvc:
    path match:
      matching-strategy: ant_path_matcher
    async:
      request-timeout: 120s            # 멀티파트 처리 대기 시간

  servlet:
    multipart:
      enabled: true
      file-size-threshold: 2MB            # 2MB 초과 시 디스크로 스필
      max-file-size: 60MB                  # 단일 파일 최대 용량
      max-request-size: 60MB               # 요청 전체 최대 용량
      resolve-lazily: true                 # 실제 파일 접근 시 파싱 (메모리 절약)

server:
  timezone: Asia/Seoul

  tomcat:
    connection-timeout: 120000       # 120초 - 업로드 연결 타임아웃
    keep-alive-timeout: 90000        # 90초 - 장시간 아이들 커넥션 방지
    max-swallow-size: -1             # 무제한 (Spring이 한도 관리)
    max-http-form-post-size: -1      # 무제한 (Spring이 한도 관리)
    max-http-header-size: 16384      # 16KB를 바이트로
    max-connections: 2000            # 동시 연결 수 (서버 스펙에 맞춰 조정)
    accept-count: 100                # 큐에 대기할 수 있는 최대 연결 수
    threads:
      max: 300                       # 요청 처리 스레드 수 (CPU/메모리에 맞춰 조정)

  error:
    include-message: always
    include-stacktrace: on-param

storage:
  provider: s3
  s3:
    bucket: image.dev.groble.im

app:
  frontend-url: https://dev.groble.im
  backend-url: https://api.dev.groble.im
  cookie:
    domain: dev.groble.im
    admin-domain: dev.groble.im
  reset:
    base-url: https://dev.groble.im
    path: /reset-password
    expiration-ms: 200000 # 2 minutes

# Springdoc OpenAPI Configuration
springdoc:
  swagger-ui:
    path: /swagger-ui
    tags-sorter: alpha
    operations-sorter: alpha
    doc-expansion: none
    disable-swagger-default-url: true
  api-docs:
    path: /v3/api-docs
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  paths-to-match:
    - /api/**
  packages-to-scan:
    - liaison.groble.api.server
  show-actuator: false
  model-and-view-allowed: true

logging:
  level:
    root: INFO
    org.springdoc: INFO
    io.swagger.v3: INFO

    # 외부 라이브러리 / 통신 로그 최소화
    org.apache.http: ERROR         # HTTP client 최소화
    org.apache.http.wire: OFF      # Wire-level log 완전 차단
    com.amazonaws: ERROR           # AWS SDK

  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n"

  file:
    name: /dev/null  # 로그 파일 쓰기를 막음 (또는 경로를 로그 수집 서버로 지정)

management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
    metrics:
      export:
        prometheus:
          enabled: true
      distribution:
        percentiles-histogram:
          http.server.requests: true
      tags:
        application: ${spring.application.name}
        environment: ${server.env}
    observations:
      key-values:
        application: ${spring.application.name}
