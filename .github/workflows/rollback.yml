#name: Rollback Production Deployment
#
#on:
#  workflow_dispatch:
#    inputs:
#      deployment_id:
#        description: 'CodeDeploy Deployment ID to rollback (leave empty for latest)'
#        required: false
#        type: string
#      reason:
#        description: 'Rollback reason'
#        required: true
#        type: string
#
#permissions:
#  contents: read
#
#env:
#  AWS_REGION: ap-northeast-2
#  CODEDEPLOY_APPLICATION: groble-app
#  CODEDEPLOY_DEPLOYMENT_GROUP: groble-prod-deployment-group
#
#jobs:
#  rollback:
#    runs-on: ubuntu-latest
#    environment: production
#
#    steps:
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Find deployment to rollback
#        id: find-deployment
#        run: |
#          if [ -n "${{ github.event.inputs.deployment_id }}" ]; then
#            DEPLOYMENT_ID="${{ github.event.inputs.deployment_id }}"
#            echo "Using provided deployment ID: $DEPLOYMENT_ID"
#          else
#            DEPLOYMENT_ID=$(aws deploy list-deployments \
#              --application-name $CODEDEPLOY_APPLICATION \
#              --deployment-group-name $CODEDEPLOY_DEPLOYMENT_GROUP \
#              --include-only-statuses Succeeded \
#              --query 'deployments[0]' \
#              --output text)
#            echo "Found latest successful deployment: $DEPLOYMENT_ID"
#          fi
#
#          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT
#
#      - name: Stop and rollback deployment
#        run: |
#          DEPLOYMENT_ID="${{ steps.find-deployment.outputs.deployment-id }}"
#          echo "üîÑ Rolling back deployment: $DEPLOYMENT_ID"
#          echo "Reason: ${{ github.event.inputs.reason }}"
#
#          # Î∞∞Ìè¨ Ï§ëÏßÄ Î∞è Î°§Î∞±
#          aws deploy stop-deployment \
#            --deployment-id $DEPLOYMENT_ID \
#            --auto-rollback-enabled
#
#          echo "‚úÖ Rollback initiated for deployment: $DEPLOYMENT_ID"
#
#      - name: Wait for rollback completion
#        run: |
#          DEPLOYMENT_ID="${{ steps.find-deployment.outputs.deployment-id }}"
#          echo "‚è≥ Waiting for rollback to complete..."
#
#          # Î°§Î∞± ÏôÑÎ£å ÎåÄÍ∏∞
#          for i in {1..20}; do
#            STATUS=$(aws deploy get-deployment \
#              --deployment-id $DEPLOYMENT_ID \
#              --query 'deploymentInfo.status' \
#              --output text)
#
#            if [ "$STATUS" == "Stopped" ]; then
#              echo "‚úÖ Rollback completed successfully"
#              break
#            elif [ $i -eq 20 ]; then
#              echo "‚ùå Rollback timeout"
#              exit 1
#            else
#              echo "‚è≥ Rollback in progress... ($i/20)"
#              sleep 30
#            fi
#          done
#
#      - name: Verify rollback
#        run: |
#          echo "üîç Verifying rollback..."
#
#          # Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖò ÏÉÅÌÉú ÌôïÏù∏
#          LB_DNS=$(aws elbv2 describe-load-balancers \
#            --names groble-load-balancer \
#            --query 'LoadBalancers[0].DNSName' \
#            --output text)
#
#          for i in {1..5}; do
#            if curl -f -s "https://$LB_DNS/health" > /dev/null; then
#              echo "‚úÖ Application is healthy after rollback!"
#              break
#            else
#              echo "‚è≥ Waiting for application to be ready... ($i/5)"
#              sleep 30
#            fi
#          done
#
#      - name: Notify rollback status
#        if: always()
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          text: |
#            üîÑ Production Rollback ${{ job.status }}!
#            Deployment ID: ${{ steps.find-deployment.outputs.deployment-id }}
#            Reason: ${{ github.event.inputs.reason }}
#            Triggered by: ${{ github.actor }}
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}