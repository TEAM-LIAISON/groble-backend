name: CD - Deploy to Development

on:
  repository_dispatch:
    types: [deploy-development]
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag to deploy'
        required: true
        type: string
      confirm:
        description: 'Type "DEPLOY" to confirm development deployment'
        required: true
        type: string

permissions:
  contents: read

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: groble-dev-spring-api
  ECS_CLUSTER: groble-cluster
  ECS_SERVICE: groble-dev-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: development  # 개발 환경

    # 수동 실행 시 확인 단계
    if: |
      (github.event_name == 'repository_dispatch') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.confirm == 'DEPLOY')

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set deployment info
        id: deploy-info
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "image-tag=${{ github.event.client_payload.image_tag }}" >> $GITHUB_OUTPUT
            echo "image-uri=${{ github.event.client_payload.image_uri }}" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.event.client_payload.commit_sha }}" >> $GITHUB_OUTPUT
            echo "actor=${{ github.event.client_payload.actor }}" >> $GITHUB_OUTPUT
            echo "run-id=${{ github.event.client_payload.run_id }}" >> $GITHUB_OUTPUT
            echo "environment=${{ github.event.client_payload.environment }}" >> $GITHUB_OUTPUT
            echo "branch=${{ github.event.client_payload.branch }}" >> $GITHUB_OUTPUT
            echo "workflow-run-id=${{ github.event.client_payload.workflow_run_id }}" >> $GITHUB_OUTPUT
          else
            echo "image-tag=${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "image-uri=${{ secrets.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.event.inputs.image_tag }}" >> $GITHUB_OUTPUT
            echo "commit-sha=${{ github.sha }}" >> $GITHUB_OUTPUT
            echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
            echo "run-id=${{ github.run_id }}" >> $GITHUB_OUTPUT
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "workflow-run-id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify image exists in ECR
        run: |
          IMAGE_TAG="${{ steps.deploy-info.outputs.image-tag }}"
          echo "🔍 Verifying image exists: $ECR_REPOSITORY:$IMAGE_TAG"

          aws ecr describe-images \
            --repository-name $ECR_REPOSITORY \
            --image-ids imageTag=$IMAGE_TAG

          echo "✅ Image verified in ECR"

      - name: Register new ECS task definition
        id: task-def
        run: |
          IMAGE_URI="${{ steps.deploy-info.outputs.image-uri }}"
          echo "📋 Registering new task definition with image: $IMAGE_URI"

          # 현재 태스크 정의 가져오기
          aws ecs describe-task-definition \
            --task-definition groble-dev-task \
            --query taskDefinition > task-definition.json

          # 새 이미지 URI로 업데이트
          jq --arg IMAGE_URI "$IMAGE_URI" \
             '.containerDefinitions[0].image = $IMAGE_URI' \
             task-definition.json > updated-task-definition.json

          # 불필요한 필드 제거
          jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .placementConstraints, .compatibilities, .registeredAt, .registeredBy)' \
             updated-task-definition.json > clean-task-definition.json

          # 새 Task Definition 등록
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://clean-task-definition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "task-definition-arn=$TASK_DEF_ARN" >> $GITHUB_OUTPUT
          echo "✅ Task definition registered: $TASK_DEF_ARN"

      - name: Deploy to ECS with Rolling Update
        id: deploy
        run: |
          TASK_DEF_ARN="${{ steps.task-def.outputs.task-definition-arn }}"
          echo "🚀 Starting ECS rolling deployment..."
          echo "📋 Using Task Definition ARN: $TASK_DEF_ARN"

          # ECS 서비스 업데이트
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --task-definition $TASK_DEF_ARN \
            --force-new-deployment

          echo "✅ ECS service update initiated"

      - name: Wait for ECS deployment completion
        run: |
          echo "⏳ Waiting for ECS deployment to complete..."

          # ECS 서비스 안정화 대기 (최대 15분)
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --cli-read-timeout 900

          echo "✅ ECS deployment completed successfully"

      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."

          # ECS 서비스 상태 확인
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --query 'services[0].{Status:status,Running:runningCount,Desired:desiredCount}')

          echo "📊 ECS Service Status: $SERVICE_INFO"

          # 개발 API 도메인으로 헬스체크
          echo "🔍 Testing application health on api.dev.groble.im..."

          # 헬스체크 (최대 5분 대기) - 개발 도메인 사용
          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://api.dev.groble.im/actuator/health" || echo "000")

            if [ "$HTTP_STATUS" = "200" ]; then
              echo "✅ Application is healthy! (HTTP $HTTP_STATUS)"
              # 응답 내용도 확인
              curl -s "https://apidev.groble.im/actuator/health" | jq '.' || echo "Response received but not JSON"
              break
            elif [ $i -eq 10 ]; then
              echo "❌ Application health check failed after 5 minutes"
              echo "🔍 Last HTTP Status: $HTTP_STATUS"
              echo "🔍 Debug: Checking endpoint availability..."
              curl -v "https://apidev.groble.im/actuator/health" || true
              exit 1
            else
              echo "⏳ Waiting for application to be ready... ($i/10) [HTTP: $HTTP_STATUS]"
              sleep 30
            fi
          done

#      - name: Notify deployment status
#        if: always()
#        uses: 8398a7/action-slack@v3
#        with:
#          status: ${{ job.status }}
#          text: |
#            🚀 Development Deployment ${{ job.status }}!
#            Image: ${{ steps.deploy-info.outputs.image-tag }}
#            Commit: ${{ steps.deploy-info.outputs.commit-sha }}
#            Actor: ${{ steps.deploy-info.outputs.actor }}
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
